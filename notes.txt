# Generating frequency dictionaries using given data
# Building MinHeap Priority Queues
# Populate Huffman Tree
# Traverse Huffman Tree and assign codes

# import heapq


# class HuffmanEncoder:
#     def __init__(self, text):
#         self.text = text
#         self.heap = []
#         self.code = {}
#         self.compress()

#     class HeapNode:
#         def __init__(self, char, freq):
#             self.char = char
#             self.freq = freq
#             self.left = None
#             self.right = None

#     def generate_frequency_dictionary(self, text):
#         frequency = {}
#         text = list(text)
#         uniq_text = set(text)
#         for letter in uniq_text:
#             frequency[letter] = text.count(letter)
#         return frequency

#     def build_heap(self, frequency):
#         for key in frequency:
#             node = self.HeapNode(key, frequency[key])
#             heapq.heappush(self.heap, node)

#     def populate_tree(self):
#         # Merging nodes of generated min heap
#         while(len(self.heap) > 1):
#             x = heapq.heappop(self.heap)
#             y = heapq.heappop(self.heap)
#             merged = self.HeapNode(None, x.freq + y.freq)
#             merged.left = x
#             merged.right = y
#             heapq.heappush(self.heap, merged)

#     def generate_codes_helper(self, node, current_code):
#         if(node == None):
#             return

#         if(node.char != None):
#             self.codes[node.char] = current_code

#         self.generate_codes_helper(node.left, current_code + "0")
#         self.generate_codes_helper(node.right, current_code + "1")

#     def generate_codes(self):
#         root = heapq.heappop(self.heap)
#         current_code = ""
#         self.generate_codes_helper(root, current_code)

#     def compress(self):
#         frequency = self.generate_frequency_dictionary(self.text)
#         self.build_heap(frequency)
#         self.populate_tree()
#         self.generate_code()
#         print(self.code)


# HuffmanEncoder("aaabbbbcccddddddaaa")
